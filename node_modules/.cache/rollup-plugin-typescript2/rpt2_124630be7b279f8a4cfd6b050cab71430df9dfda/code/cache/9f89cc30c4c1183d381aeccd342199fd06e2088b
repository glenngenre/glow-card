{"code":"import { __assign, __spreadArray } from \"tslib\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/GlowEffect.css\";\nvar GlowEffect = function (_a) {\n    var children = _a.children, _b = _a.className, className = _b === void 0 ? \"\" : _b, style = _a.style, gradientColors = _a.gradientColors, _c = _a.animationDuration, animationDuration = _c === void 0 ? 3 : _c, _d = _a.as, Component = _d === void 0 ? \"div\" : _d;\n    var _e = useState(0), angle = _e[0], setAngle = _e[1];\n    useEffect(function () {\n        var animateGradient = function () {\n            setAngle(function (prevAngle) { return (prevAngle + 1) % 360; });\n        };\n        var interval = setInterval(animateGradient, (animationDuration * 1000) / 360);\n        return function () { return clearInterval(interval); };\n    }, [animationDuration]);\n    // Create custom CSS variables for the gradient\n    var customCSSVars = {};\n    if (gradientColors && gradientColors.length > 0) {\n        var colors = gradientColors.length === 1 ? __spreadArray(__spreadArray([], gradientColors, true), gradientColors, true) : __spreadArray([], gradientColors, true);\n        // Ensure the gradients loop properly by adding the first color at the end if not already there\n        if (colors[0] !== colors[colors.length - 1] && colors.length > 1) {\n            colors.push(colors[0]);\n        }\n        customCSSVars[\"--gradient\"] = \"conic-gradient(from \".concat(angle, \"deg, \").concat(colors.join(\", \"), \")\");\n    }\n    else {\n        // Default gradient if none provided\n        customCSSVars[\"--gradient\"] = \"conic-gradient(from \".concat(angle, \"deg, #ff4545, #00ff99)\");\n    }\n    var glowStyles = __assign({ position: \"relative\" }, style);\n    var pseudoElementBeforeStyles = {\n        content: '\"\"',\n        position: \"absolute\",\n        height: \"100%\",\n        width: \"100%\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        zIndex: -1,\n        padding: \"3px\",\n        borderRadius: \"inherit\",\n        filter: \"blur(1.5rem)\",\n        opacity: 0.5,\n        backgroundImage: customCSSVars[\"--gradient\"],\n    };\n    var pseudoElementAfterStyles = {\n        content: '\"\"',\n        position: \"absolute\",\n        height: \"100%\",\n        width: \"100%\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        zIndex: -1,\n        padding: \"3px\",\n        borderRadius: \"inherit\",\n        backgroundImage: customCSSVars[\"--gradient\"],\n    };\n    return (React.createElement(Component, { className: \"glow-effect-js \".concat(className), style: glowStyles },\n        React.createElement(\"div\", { style: pseudoElementBeforeStyles }),\n        React.createElement(\"div\", { style: pseudoElementAfterStyles }),\n        children));\n};\nexport default GlowEffect;\n","references":["/home/genre/web/glow-card/node_modules/@types/react/index.d.ts"],"dts":{"name":"/home/genre/web/glow-card/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/GlowEffect.d.ts","writeByteOrderMark":false,"text":"import React, { ReactNode, ElementType } from \"react\";\nimport \"../styles/GlowEffect.css\";\nexport interface GlowEffectProps {\n    /**\n     * Element to apply the glow effect to\n     */\n    children?: ReactNode;\n    /**\n     * Optional custom className\n     */\n    className?: string;\n    /**\n     * Optional custom styles\n     */\n    style?: React.CSSProperties;\n    /**\n     * Optional custom border gradient colors\n     */\n    gradientColors?: string[];\n    /**\n     * Optional animation duration in seconds\n     */\n    animationDuration?: number;\n    /**\n     * Optional tag name for the wrapper element (default: div)\n     */\n    as?: ElementType;\n}\ndeclare const GlowEffect: React.FC<GlowEffectProps>;\nexport default GlowEffect;\n"}}
